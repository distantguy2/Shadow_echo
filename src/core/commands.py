# src/core/commands.py

import re
from typing import Dict, Optional
from .core.entities import Player
from .skills import SKILL_LIBRARY
from ..utils.logger import setup_logger

logger = setup_logger("Commands")

class CommandHandler:
    """X·ª≠ l√Ω c√°c l·ªánh trong game"""
    
    def __init__(self, game):
        self.game = game
        self.commands = {
            'use': self.use_card,
            'status': self.show_status,
            'scan': self.scan_area,
            'inventory': self.show_inventory,
            'help': self.show_help,
            'save': self.save_game,
            'load': self.load_game,
            'clues': self.show_clues,
            'accuse': self.accuse_player,
            'build': self.build_structure
        }
    
    def process_command(self, command_str: str) -> str:
        """X·ª≠ l√Ω chu·ªói l·ªánh"""
        if not command_str.strip():
            return "‚ùå Vui l√≤ng nh·∫≠p l·ªánh"
        
        parts = command_str.strip().split(' ', 1)
        cmd = parts[0].lower()
        args = parts[1] if len(parts) > 1 else ""
        
        handler = self.commands.get(cmd)
        if handler:
            return handler(args)
        else:
            return f"‚ùå L·ªánh kh√¥ng h·ª£p l·ªá: {cmd}. G√µ 'help' ƒë·ªÉ xem danh s√°ch l·ªánh."
    
    def use_card(self, args: str) -> str:
        """S·ª≠ d·ª•ng th·∫ª b√†i"""
        if not args:
            return "‚ùå C√∫ ph√°p: use <card_id>"
        
        player = self.game.players[self.game.current_player]
        card_id = args.split()[0]
        
        if card_id in player.cards:
            result = self.game.card_system.use_card(player, card_id, self.game.phase)
            if result.get("success"):
                # Generate clue if needed
                self.game.clue_generator.generate_card_usage_clue(player, card_id)
                return f"‚úÖ {result['message']}"
            else:
                return f"‚ùå {result['message']}"
        else:
            return f"‚ùå B·∫°n kh√¥ng c√≥ th·∫ª '{card_id}'"
    
    def show_status(self, args: str) -> str:
        """Hi·ªÉn th·ªã tr·∫°ng th√°i"""
        player = self.game.players[self.game.current_player]
        status = f"""
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
{player.name}'s Status
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ù§Ô∏è HP: {player.hp}/{player.max_hp}
‚≠ê Level: {player.level} (EXP: {player.exp}/{player.level * 100})
üé≠ Role: {player.role.value} (True: {player.true_role.value})
üìç Position: {player.position}
üòà Sin: {player.alignment.sin} / ‚ú® Grace: {player.alignment.grace}
üîç Suspicion: {player.alignment.suspicion:.1f}%

Cards:
"""
        for i, card_id in enumerate(player.cards):
            card_info = self.game.card_system.get_card_info(card_id)
            if card_info:
                status += f"  {i+1}. {card_info.symbol} {card_info.name}\n"
        
        status += "\nSkills:\n"
        for skill in player.skills:
            skill_data = SKILL_LIBRARY.get(skill.skill_id)
            if skill_data:
                status += f"  {skill_data.icon} {skill_data.name} (Lvl {skill.level})"
                if skill.cooldown > 0:
                    status += f" [Cooldown: {skill.cooldown:.1f}s]"
                status += "\n"
        
        status += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        return status
    
    def scan_area(self, args: str) -> str:
        """Qu√©t khu v·ª±c"""
        player = self.game.players[self.game.current_player]
        scan_range = 150
        
        result = f"Scanning area... (range: {scan_range})\n\n"
        
        # Qu√©t monsters
        monsters_found = []
        for i, monster in enumerate(self.game.monsters):
            dx = monster.position[0] - player.position[0]
            dy = monster.position[1] - player.position[1]
            distance = (dx**2 + dy**2)**0.5
            
            if distance <= scan_range:
                monsters_found.append(f"  üî¥ Monster {monster.symbol} - HP: {monster.hp}/{monster.max_hp} - Distance: {distance:.1f}")
        
        # Qu√©t NPCs
        npcs_found = []
        for npc in self.game.npcs:
            if npc["alive"]:
                dx = npc["position"][0] - player.position[0]
                dy = npc["position"][1] - player.position[1]
                distance = (dx**2 + dy**2)**0.5
                
                if distance <= scan_range:
                    npcs_found.append(f"  üü¢ NPC {npc['name']} - HP: {npc['hp']}/{npc['max_hp']} - Distance: {distance:.1f}")
        
        # Qu√©t clues about other players
        other_players = [p for p in self.game.players if p.id != player.id]
        player_clues = []
        for p in other_players:
            if p.clues:
                clue = p.clues[-1]  # Most recent clue
                player_clues.append(f"  üí≠ About {p.name}: '{clue['text']}' (Credibility: {clue['credibility']:.0%})")
        
        if monsters_found:
            result += f"Monsters ({len(monsters_found)}):\n" + "\n".join(monsters_found) + "\n\n"
        else:
            result += "No monsters in range\n\n"
            
        if npcs_found:
            result += f"NPCs ({len(npcs_found)}):\n" + "\n".join(npcs_found) + "\n\n"
        else:
            result += "No NPCs in range\n\n"
            
        if player_clues:
            result += "Clues about others:\n" + "\n".join(player_clues)
        else:
            result += "No clues found"
        
        return result
    
    def show_inventory(self, args: str) -> str:
        """Hi·ªÉn th·ªã t√∫i ƒë·ªì"""
        player = self.game.players[self.game.current_player]
        if not player.cards:
            return "üì¶ Inventory is empty"
        
        inventory = "üì¶ Card Inventory:\n\n"
        for i, card_id in enumerate(player.cards):
            card_info = self.game.card_system.get_card_info(card_id)
            if card_info:
                inventory += f"  {i+1}. {card_info.symbol} {card_info.name}\n"
                inventory += f"     Sin: {card_info.sin}, Grace: {card_info.grace}\n"
                inventory += f"     Day: {card_info.day_effect.get('description', 'None')}\n"
                inventory += f"     Night: {card_info.night_effect.get('description', 'None')}\n\n"
        
        return inventory
    
    def show_clues(self, args: str) -> str:
        """Hi·ªÉn th·ªã clues"""
        result = "üìã Investigation Clues:\n\n"
        
        for player in self.game.players:
            if player.clues:
                result += f"{player.name}:\n"
                for clue in player.clues[-3:]:  # Show last 3 clues
                    credibility_icon = "üü¢" if clue.credibility > 0.7 else "üü°" if clue.credibility > 0.4 else "üî¥"
                    result += f"  {credibility_icon} {clue.text} - {clue.source}\n"
                result += "\n"
        
        return result
    
    def accuse_player(self, args: str) -> str:
        """Bu·ªôc t·ªôi ng∆∞·ªùi ch∆°i kh√°c"""
        if not args:
            return "‚ùå C√∫ ph√°p: accuse <player_name> --reason=<reason>"
        
        parts = args.split("--reason=")
        if len(parts) != 2:
            return "‚ùå Ph·∫£i c√≥ l√Ω do: accuse <player_name> --reason=<reason>"
        
        target_name = parts[0].strip()
        reason = parts[1].strip()
        
        # T√¨m player b·ªã t·ªë
        target_player = None
        for p in self.game.players:
            if p.name.lower() == target_name.lower():
                target_player = p
                break
        
        if not target_player:
            return f"‚ùå Kh√¥ng t√¨m th·∫•y player: {target_name}"
        
        # T√≠nh to√°n credibility c·ªßa l·ªùi t·ªë
        accuser = self.game.players[self.game.current_player]
        credibility = 0.5
        
        # Ng∆∞·ªùi t·ªë c√≥ grace cao -> l·ªùi t·ªë ƒë√°ng tin h∆°n
        credibility += accuser.alignment.grace * 0.1
        
        # Ng∆∞·ªùi b·ªã t·ªë c√≥ sin cao -> l·ªùi t·ªë ƒë√°ng tin h∆°n
        credibility += target_player.alignment.sin * 0.15
        
        # Ki·ªÉm tra if c√≥ clues h·ªó tr·ª£
        if target_player.clues:
            credibility += len(target_player.clues) * 0.1
        
        credibility = min(1.0, credibility)
        
        # Th√™m accusation v√†o game state
        accusation = {
            "accuser": accuser.name,
            "target": target_player.name,
            "reason": reason,
            "credibility": credibility,
            "timestamp": self.game.day_count
        }
        
        # N·∫øu credibility cao, ·∫£nh h∆∞·ªüng ƒë·∫øn NPC trust
        if credibility > 0.7:
            self.game.alignment_manager.update_npc_trust(target_player, -0.3)
            
        message = f"üó£Ô∏è {accuser.name} accuses {target_player.name} of {reason}"
        message += f"\nCredibility: {credibility:.0%}"
        
        return message
    
    def build_structure(self, args: str) -> str:
        """X√¢y d·ª±ng c·∫•u tr√∫c ph√≤ng th·ªß"""
        if not args:
            return "‚ùå C√∫ ph√°p: build <structure> --pos=<location>"
        
        if "--pos=" not in args:
            return "‚ùå Ph·∫£i ch·ªâ ƒë·ªãnh v·ªã tr√≠: build <structure> --pos=<location>"
        
        parts = args.split("--pos=")
        structure = parts[0].strip()
        position = parts[1].strip()
        
        # Simple structure building (to be expanded)
        allowed_structures = ["barricade", "fence", "wall"]
        if structure not in allowed_structures:
            return f"‚ùå C·∫•u tr√∫c kh√¥ng h·ª£p l·ªá. Cho ph√©p: {', '.join(allowed_structures)}"
        
        return f"üõ†Ô∏è Built {structure} at {position}"
    
    def save_game(self, args: str) -> str:
        """L∆∞u game"""
        # TODO: Implement save system
        return "‚úÖ Game saved successfully!"
    
    def load_game(self, args: str) -> str:
        """T·∫£i game"""
        # TODO: Implement load system
        return "‚úÖ Game loaded successfully!"
    
    def show_help(self, args: str) -> str:
        """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n"""
        return """
üìú Available Commands:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üé¥ Card Management:
  use <card_id>   - Use a card (e.g., use axe)
  inventory       - Show your cards

üîç Information:
  status          - Show character status
  scan            - Scan the area for entities
  clues           - Show investigation clues

ü§ù Social:
  accuse <name> --reason=<reason>
                  - Accuse a player
  
üèóÔ∏è Building:
  build <structure> --pos=<location>
                  - Build defenses

üíæ Game:
  save            - Save game
  load            - Load game
  help            - Show this help

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Use '1', '2', '3' keys to quickly use cards
"""
